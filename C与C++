计算机改变了世界，改变了人类的生活。许多人觉得计算机的运转十分神秘，其实计算机并不神秘，她并不是天生“自动”工作的，要让计算机按照人们的愿望工作，必须由人们首先编写好程序，输入计算机，执行程序才能使计算机产生相应的操作。在计算机的初期，人们为了让计算机工作，必须编写出由0和1所组成的一系列的指令，通过它只会计算机工作。20世纪50年代出现了用于程序设计的“高级语言”，从1954年出现的第一个高级语言FORTRAN以来，全世界现在至少发展出了上千种就算及高级语言，每种高级语言都有其特定的使用领域。其中使用广泛的有100多种，影响最大的有：FORTRAN和ALGOL（适合数值计算）﹑BASIC和QBASIC（适合初学者的小型会话语言）﹑COBOL（适合商业管理）﹑PASCAL（适合教学的结构程序设计语言）﹑LISP和PROLOG（人工智能语言）﹑Visual Basic（支持面向对象程序设计的语言）﹑C（系统描述语言）﹑C++（支持面向对象程序设计的大型语言）﹑JAVA（适于网络使用的语言）等。 高级语言的出现被认为是计算机发展史上的“惊人的成就”，它为计算机的推广普及提供了可能。下面我们就来论述一下C++相对于C语言的主要特点和发展。 C语言的历史: 著名的计算机科学家丹尼斯•里奇（Dennis Ritchie）创造的。1967年， Ritchie进入贝尔实验室工作。贝尔实验室是当时世界上最有创造力的地方之一，著名的C语言、C++语言和Unix操作系统都诞生于此。一开始, 里奇和他的同事肯•汤普生开始研究DEC PDP-7机器，但是在这个机器上写程序很困难，只能用很底层很高深的汇编语言。于是汤普生设计了一种高级程序语言，并把它命名为B语言。但是由于B语言 本身设计的缺陷，使他在内存的限制面前一筹莫展。1973年，里奇决定对B语言进行改良，他赋予了新语言强有力的系统控制方面的能力，并且新语言非常简 洁、高效，里奇把它命名为C语言，意为B语言的下一代。最初的C语言只是为编写UNIX操作系统提供的一种工作语言而设计的，1973年，Ken Thonpson和 D．M．Ritchie合作把UNIX的90%以上的程序用C语言改写（原来的UNIX操作系统是用汇编语言编写的）。后来，C语言多次作了改进，但主要还是在贝尔实验室内部使用。直到1975年UNIX第6版 公布后，C语言的突出优点才引起人们普遍注意。1977年出现了不依赖于具体机器的C语言编 译文本《可移植C语言编译程序》，使C移植到其它机器时所需做的工作大大简化了，这也推动了UNIX操作系统迅速地在各种机器上实现。例如，VAX，AT&T等计算机系统都相继开发了UNIX。随着UNIX的日益广泛使用，C语言也迅速得到推广。C语言和UNIX可以说是一对孪生兄弟，在发展过程中相辅相成。1978年以后，C语言已先后移植到大、中、小、微型机上，如IBM System/370、Honeywell 6000和Interdata 8/32，已独立于UNIX和PDP了。现在C语言已风靡全世界，成为世界上应用最广泛的几种计算机语言之一。 以1978年由美国电话电报公司(AT&T)贝尔实验室正式发表的UNIX第7版中的C编译程序为基础，Brian W．Kernighan(柯尼汉)和Dennis M．Ritchie(里奇)合著了影响深远的名著《The C Programming Language》，常常称它为‘K&R’，也有人称之为‘K&R标准’或‘白皮书’(white book)，它成为后来广泛使用的C语言版本的基础，但在‘K&R’中并没有定义一个完整的标准C语言。为此，1983年，美国国家标准化协会(ANSl)X3J11 委员会根据C语言问世以来各种版本对C的发展和扩充，制定了新的标准，称为ANSI C，ANSI C比原来的标准C有了很大的发展：K&R在1988年修改了他们的经典著作《The C Programming Language》，按照ANSI C标准重新写了该书。1987年，ANSI又公布了新标准——87 ANSI C。目前流行的C编译系统都是以它为基础的。当时广泛流行的各种版本C语言编译系统虽然基本部分是相同的，但也有一些不同。在微型机上使用的有Microsoft C(MS C),Borland Turbo C，Quick C和AT&T C等，它们的不同版本又略有差异。到后来的Java、C++、C#都是以C语言为基础发展起来的。 由于Ｃ语言的强大功能和各方面的优点逐渐为人们认识，到了八十年代，C开始进入其它操作系统，并很快在各类大、中、小和微型计算机上得到了广泛的使用。成为当代最优秀的程序设计语言之一。 但是随着软件规模的增大，用C语言编写程序渐渐显得有些吃力了。C语言是结构化和模块化的语言，它是面向过程的。在处理较小规模的程序时，程序员用C语言还比较得心应手。但是当问题比较复杂、程序的规模比较大时，结构化程序设计方法就显出它的不足。C程序的设计者必须细致地设计程序的每一个细节，准确地考虑到程序运行时每一时刻发生的事情，例如各个变量的值是如何变化的，什么时候应该进行哪些输入，在屏幕上应该输出什么等。这对程序员的要求是比较高的，如果面对的是一个复杂问题，程序员往往感到力不从心。当初提出结构化程序设计方法的母的是解决软件设计危机，但是这个目标并未完全实现。 为了解决软件设计危机，在20世纪80年代提出了面向对象的程序设计（object oriented programming，OOP），需要设计出能支持面向对象的程序设计方法的新的语言。Smalltalk就是一种面向对象的语言。在实践中，人们发现由于C语言是如何深入人心，使用如此广泛，面对程序设计方法的革命，最好的办法不是另外发明一种新的语言去代替它，而是在它原有的基础上加以发展。在这种形势下，C++应运而生。C++是由AT&T Bell（贝尔）实验室的Bjarne Stroustrup博士及其同事与20世纪80年代初在C语言的基础上开发成功的，C++保留了C语言原有的所有优点，增加了面向对象的机制。由于C++对C的改进主要体现在增加了适用于面向对象程序设计的“类（class）”，因此最初它被Bjarne Stroustrup成为“带类的C”。当时不是叫做C++，而是C with class，这是把它当作一种C语言的有效扩充。由于当时C语言在编程界居于老大的地位，要想发展一种新的语言，最强大的竞争对手就是C语言，所以当时有两个问题最受关注：C++要在运行时间、代码紧凑性和数据紧凑性方面能够与C语言相媲美，但是还要尽量避免在语言应用领域的限制。在这种情况下，一个很自然的想法就是让C++从C语言继承过来，但是我们的Bjarne博士更具有先见之明，他为了避免受到C语言的局限性，参考了很多的语言，例如：从Simula继承了类的概念，从Algol68继承了运算符重载、引用以及在任何地方声明变量的能力，从BCPL获得了//注释，从Ada得到了模板、名字空间，从Ada、Clu和ML取来了异常。后来为了强调它是C的增强版，用了C语言的自加运算符“++”，改称为C++。 C++是由C语言发展而来的，与C语言兼容。用C语言写的程序基本上可以不加修饰地用于C++。从C++的名字可以看出它是C的超集。C++既可用于面向过程的结构化程序设计，又可用于面向对象的程序设计，是一种功能强大的混合型的程序设计语言。 而这2种语言则各有各的特点，首先我们来说C语言：
1.简洁紧凑、灵活方便 C语言一共只有32个关键字,9种控制语句，程序书写自由，主要用小写字母表示。它把高级语言的基本结构和语句与低级语言的实用性结合起来。 C 语言可以象汇编语言一样对位、字节和地址进行操作, 而这三者是计算机最基本的工作单元。
2.运算符丰富 C的运算符包含的范围很广泛，共有种34个运算符。C语言把括号、赋值、强制类型转换等都作为运算符处理。从而使C的运算类型极其丰富表达式类型多样化，灵活使用各种运算符可以实现在其它高级语言中难以实现的运算。
3.数据结构丰富 C的数据类型有：整型、实型、字符型、数组类型、指针类型、结构体类型、共用体类型等。能用来实现各种复杂的数据类型的运算。并引入了指针概念,使程序效率更高。另外C语言具有强大的图形功能, 支持多种显示器和驱动器。且计算功能、逻辑判断功能强大。
4.C是结构式语言 结构式语言的显著特点是代码及数据的分隔化,即程序的各个部分除了必要的信息交流外彼此独立。这种结构化方式可使程序层次清晰, 便于使用、维护以及调试。C语言是以函数形式提供给用户的,这些函数可方便的调用,并具有多种循环、条件语句控制程序流向,从而使程序完全结构化。
5.C语法限制不太严格、程序设计自由度大 一般的高级语言语法检查比较严，能够检查出几乎所有的语法错误。而C语言允许程序编写者有较大的自由度。
6.C语言允许直接访问物理地址，可以直接对硬件进行操作 因此既具有高级语言的功能，又具有低级语言的许多功能，能够象汇编语言一样对位、字节和地址进行操作,而这三者是计算机最基本的工作单元，可以用来写系统软件。
7.C语言程序生成代码质量高，程序执行效率高 一般只比汇编程序生成的目标代码效率低10へ20%。
8.C语言适用范围大，可移植性好。
C++的主要特点是: 抽象和封装，继承和派生，多态性。
1.抽象性 把众多的事物进行归纳、分类是人们在认识客观世界时经常采用的思维方法，“物以类聚，人以群分”就是分类的意思，分类所依据的原则是抽象。抽象（Abstract）就是忽略事物中与当前目标无关的非本质特征，更充分地注意与当前目标有关的本质特征。从而找出事物的共性，并把具有共性的事物划为一类，得到一个抽象的概念。例如，在设计一个学生成绩管理系统的过程中，考察学生张华这个对象时，就只关心他的班级、学号、成绩等，而忽略他的身高、体重等信息。因此，抽象性是对事物的抽象概括描述，实现了客观世界向计算机世界的转化。将客观事物抽象成对象及类是比较难的过程，也是面向对象方法的第一步。 2.封装性 封装（Encapsulation）封装有两个含义：一是把对象的全部属性和行为结合在一起，形成一个不可分割的独立单位。对象的属性值（除了公有的属性值）只能由这个对象的行为来读取和修改；二是尽可能隐蔽对象的内部细节，对外形成一道屏障，与外部的联系只能通过外部接口实现。封装的信息隐蔽作用反映了事物的相对独立性，可以只关心它对外所提供的接口，即能做什么，而不注意其内部细节，即怎么提供这些服务。例如，用陶瓷封装起来的一块集成电路芯片，其内部电路是不可见的，而且使用者也不关心它的内部结构，只关心芯片引脚的个数、引脚的电气参数及引脚提供的功能，利用这些引脚，使用者将各种不同的芯片连接起来，就能组装成具有一定功能的模块。封装的结果使对象以外的部分不能随意存取对象的内部属性，从而有效地避免了外部错误对它的影响，大大减小了查错和排错的难度。另一方面，当对象内部进行修改时，由于它只通过少量的外部接口对外提供服务，因此同样减小了内部的修改对外部的影响。同时，如果一味地强调封装，则对象的任何属性都不允许外部直接存取，要增加许多没有其他意义，只负责读或写的行为。这为编程工作增加了负担，增加了运行开销，并且使得程序显得臃肿。为了避免这一点，在语言的具体实现过程中应使对象有不同程度的可见性，进而与客观世界的具体情况相符合。封装机制将对象的使用者与设计者分开，使用者不必知道对象行为实现的细节，只需要用设计者提供的外部接口让对象去做。封装的结果实际上隐蔽了复杂性，并提供了代码重用性，从而降低了软件开发的难度。 3. 继承性 继承（Inheritance）是一种联结类与类的层次模型。继承性是指特殊类的对象拥有其一般类的属性和行为。继承意味着“自动地拥有”，即特殊类中不必重新定义已在一般类中定义过的属性和行为，而它却自动地、隐含地拥有其一般类的属性与行为。继承允许和鼓励类的重用，提供了一种明确表述共性的方法。一个特殊类既有自己新定义的属性和行为，又有继承下来的属性和行为。尽管继承下来的属性和行为是隐式的，但无论在概念上还是在实际效果上，都是这个类的属性和行为。当这个特殊类又被它更下层的特殊类继承时，它继承来的和自己定义的属性和行为又被下一层的特殊类继承下去。因此，继承是传递的，体现了大自然中特殊与一般的关系。在软件开发过程中，继承性实现了软件模块的可重用性、独立性，缩短了开发周期，提高了软件开发的效率，同时使软件易于维护和修改。这是因为要修改或增加某一属性或行为，只需在相应的类中进行改动，而它派生的所有类都自动地、隐含地作了相应的改动。由此可见，继承是对客观世界的直接反映，通过类的继承，能够实现对问题的深入抽象描述，反映出人类认识问题的发展过程。 4.多态性 在C++中所谓多态性（Polymorphism）是指：由继承而产生的相关的不同的类，其对象对同一消息会作出不同的响应。多态性是面向对象设计的一个重要特征，能增加程序的灵活性。 最后，C++对C语言的“增强”，表现在两个方面：（1）在原来面向过程的机制基础上，对C语言的功能做了不少扩充。（2）增加了面向对象的机制。C++建立在c语言的基础上却比c语言的功能更加强大，可以说C++很好的传承了C语言的优点并且加上了自己的独特创意上去的一门语言。C++在时代高速发展中恰合时宜地出现了，以后开发软件将更加快速方便，计算机网络内容将愈加丰富与精彩。 本文引用了新浪微博“FCB水木仔”，知乎“Milo Yip”，“铭刻时间的歌”等多位网友，以及《C++：面向对象程序设计》，《C++编程----面向问题的设计方法》等参考书籍。
